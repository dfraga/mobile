/**
 * Copyright (c) <2011>, Antonio Santiago (asantiagop@gmail.com)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Antonio Santiago nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL ANTONIO SANTIAGO BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package org.aemetaquisition;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.TimeZone;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.GZIPInputStream;

/**
 *
 * @author Antonio Santiago <asantiago(at)gmail(dot)com>
 */
public class Utils {

    private static final Logger logger = Logger.getLogger(Utils.class.getName());
    private static final SimpleDateFormat dataFormatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    private static final SimpleDateFormat dataYearMonthDayFormatter = new SimpleDateFormat("yyyyMMdd");

    public static Calendar getCurrentCalendarUTC() {
        return Calendar.getInstance(TimeZone.getTimeZone("UTC"));
    }

    public static String getCurrentStringCalendarUTC() {
        return dataYearMonthDayFormatter.format(getCurrentCalendarUTC().getTime());
    }

    public static String getStringFromCalendarUTC(Calendar calendar) {
        return dataYearMonthDayFormatter.format(calendar.getTime());
    }

    public static String getStringFromDate(Date date) {
        Calendar c = getCurrentCalendarUTC();
        c.setTime(date);
        return dataYearMonthDayFormatter.format(date);
    }

    /**
     * Returns a string with the current system date in UTC.
     * @return
     */
    public static String getCurrentFormattedDate() {
        return dataFormatter.format(getCurrentCalendarUTC().getTime());
    }

    public static String formattedDate(Date date) {
        return dataFormatter.format(date.getTime());
    }

    /**
     * Uncompress file
     * @param localfile
     * @param targetlocalfile
     * @return
     */
    public static boolean uncompressGzFile(File localfile, File targetlocalfile) {
        GZIPInputStream in = null;
        OutputStream out = null;
        try {
            in = new GZIPInputStream(new FileInputStream(localfile));
            out = new FileOutputStream(targetlocalfile);
            // Transfer bytes from the compressed file to the output file
            byte[] buf = new byte[1024];
            int len;
            while ((len = in.read(buf)) > 0) {
                out.write(buf, 0, len);
            }
            return true;
        } catch (IOException ex) {
            logger.severe(ex.getMessage());
            logger.log(Level.SEVERE, "There was a problem while uncompressing file ''{0}'' to ''{1}''. Exception message ''{2}''.",
                    new Object[]{localfile.getName(), targetlocalfile.getName(), ex.getMessage()});
            return false;
        } finally {
            // Close the file and stream
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ex) {
                }
            }
            if (out != null) {
                try {
                    out.close();
                } catch (IOException ex) {
                }
            }
        }
    }
}
