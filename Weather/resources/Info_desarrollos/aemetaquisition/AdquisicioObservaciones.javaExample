/**
 * Copyright (c) <2011>, Antonio Santiago (asantiagop@gmail.com)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Antonio Santiago nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL ANTONIO SANTIAGO BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package org.aemetaquisition;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.SocketException;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.commons.net.ftp.FTPClient;
import org.apache.commons.net.ftp.FTPFile;

/**
 *
 * @author Antonio Santiago <asantiago(at)gmail(dot)com>
 */
public class AdquisicioObservaciones {

    private static final Logger logger = Logger.getLogger(AdquisicioObservaciones.class.getName());
    private static final String server = "ftpdatos.aemet.es";
    private static final String folder = "datos_observacion/observaciones_diezminutales";
    private FTPClient ftpclient = null;
    private File localFolder = null;
    private Date date = null;

    public AdquisicioObservaciones(File localFolder) {
        this.localFolder = localFolder;
    }

    /**
     * Get data from observacions AEMET.
     */
    public void get(Date date) {
        this.date = date;
        logger.log(Level.INFO, "{0} - Start: {1}", new Object[]{AdquisicioObservaciones.class.getName(), Utils.getCurrentFormattedDate()});
        handleFiles();
        logger.log(Level.INFO, "{0} - End: {1}", new Object[]{AdquisicioObservaciones.class.getName(), Utils.getCurrentFormattedDate()});
    }

    /**
     * Download, uncrompress and read files storing data
     */
    private void handleFiles() {
        int totalFiles = 0;
        int totalDownloaded = 0;
        int totalIgnored = 0;
        int totalErrors = 0;

        try {
            ftpclient = new FTPClient();

            // Connect to server
            ftpclient.connect(server);
            ftpclient.setFileTransferMode(FTPClient.BINARY_FILE_TYPE);

            // Loggin
            if (!ftpclient.login("anonymous", null)) {
                logger.severe("Can't log into FTP");
                return;
            }
            // Change directory
            if (!ftpclient.changeWorkingDirectory(folder)) {
                logger.log(Level.SEVERE, "Can''t change to folder ''{0}''.", folder);
                return;
            }

            // Create local directori for the day.
            String dayFolder = Utils.getStringFromDate(this.date);
            File folderDay = new File(this.localFolder, dayFolder);
            if (!folderDay.exists()) {
                if (!folderDay.mkdir()) {
                    logger.log(Level.SEVERE, "Can''t create the daily folder ''{0}''", folderDay.getAbsolutePath());
                    return;
                }
            }

            // Change to day directory
            String remoteDayFolder = Utils.getStringFromDate(this.date) + "_diezminutales";
            if (!ftpclient.changeWorkingDirectory(remoteDayFolder)) {
                logger.log(Level.SEVERE, "Can''t change to day folder ''{0}''.", remoteDayFolder);
                return;
            }

            FTPFile[] files = ftpclient.listFiles();
            for (int i = 0; i < files.length; i++) {
                FTPFile ftpfile = files[i];
                long size = ftpfile.getSize();
                File localfile = new File(folderDay, ftpfile.getName());
                boolean mustBeRead = false;

                // Check if file is a real data file
                if (!ftpfile.getName().contains("_datos")) {
                    continue;
                }

                totalFiles++;
                if (!localfile.exists()) {
                    logger.log(Level.INFO, "File ''{0}'' doesn't exist locally",
                            new Object[]{ftpfile.getName()});
                    mustBeRead = true;
                } else if (Math.abs(localfile.length() - size) > 1) {
                    // Ha vegades la diferencia del fitxer remot i el local difereixen en 1 byte pero son iguals.
                    logger.log(Level.INFO, "File ''{0}'' size changed (before: {1}b, after: {2}b)",
                            new Object[]{ftpfile.getName(), localfile.length(), size});
                    mustBeRead = true;
                } else {
                    logger.log(Level.INFO, "Ignored file ''{0}''", ftpfile.getName());
                    totalIgnored++;
                }

                // If we need to read the file then control if any error occurs.
                if (mustBeRead) {
                    try {
                        downloadFile(ftpfile, localfile);
                        totalDownloaded++;
                    } catch (IOException ex) {
                        totalErrors++;
                    } finally {
                        mustBeRead = false;
                    }
                }
            }
        } catch (SocketException ex) {
            logger.severe(ex.getMessage());
        } catch (IOException ex) {
            logger.severe(ex.getMessage());
        } finally {
            if (ftpclient != null) {
                try {
                    ftpclient.disconnect();
                } catch (IOException ex) {
                }
            }
        }

        logger.log(Level.INFO, "Total files {0}, Total downloaded {1}, Total ignored {2}, Total errors: {3}",
                new Object[]{totalFiles, totalDownloaded, totalIgnored, totalErrors});
    }

    /**
     * Stores locally the specified FTP file if it has changes or doesn't exists.
     * @param ftpfile
     * @param localfile
     * @throws IOException
     */
    private void downloadFile(FTPFile ftpfile, File localfile) throws IOException {
        FileOutputStream fos = null;
        try {
            logger.log(Level.INFO, "Downloading file ''{0}'' at ''{1}''",
                    new Object[]{ftpfile.getName(), Utils.getCurrentFormattedDate()});

            fos = new FileOutputStream(localfile);
            ftpclient.retrieveFile(ftpfile.getName(), fos);

            logger.log(Level.INFO, "Downloaded finished at ''{0}'' , size:''{1} ''bytes , timestamp: ''{2}''.",
                    new Object[]{Utils.getCurrentFormattedDate(), ftpfile.getSize(), ftpfile.getTimestamp().getTime()});

            // Uncompress file
            String targetName = localfile.getName().replaceAll(".gz", "");
            File targetlocalfile = new File(localfile.getParentFile(), targetName);
            if (Utils.uncompressGzFile(localfile, targetlocalfile)) {
                //
                // TODO - Here you can handle the file.
            } else {
                // If there is any error uncompressing file then remove files to
                // ensure it will be downloaded again.
                localfile.delete();
                targetlocalfile.delete();
            }
        } catch (IOException ex) {
            logger.log(Level.SEVERE, "A problem occurs while downloading file ''{0}''. Exception message ''{1}''.",
                    new Object[]{ftpfile.getName(), ex.getMessage()});
            throw ex;
        } finally {
            if (fos != null) {
                try {
                    fos.close();
                } catch (IOException ex) {
                }
            }
        }
    }
}
